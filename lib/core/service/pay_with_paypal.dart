import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:http/http.dart' as http;
import 'package:url_launcher/url_launcher.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import 'package:ecommerce/presentation/cart/views/order_placed.dart';
import 'package:ecommerce/presentation/cart/bloc/cart_products_display_cubit.dart';
import 'package:ecommerce/domain/order/entities/product_oredered.dart';

class PayPalService {
  static const String _serverUrl = 'http://192.168.36.155:3000';
  
  // L∆∞u th√¥ng tin ƒë∆°n h√†ng hi·ªán t·∫°i
  static Map<String, dynamic>? currentOrderInfo;
  
  /// T·∫°o thanh to√°n PayPal (method c≈© ƒë·ªÉ t∆∞∆°ng th√≠ch)
  static Future<void> createPayment(double total, BuildContext context) async {
    try {
      // Hi·ªÉn th·ªã loading
      _showLoadingDialog(context);

      print('üåê PayPal Service - Creating payment for: \$${total}');
      print('üåê Server URL: $_serverUrl');
      
      final url = Uri.parse('$_serverUrl/create-payment');
      final requestBody = jsonEncode({'total': total.toStringAsFixed(2)});

      print('üì° Request URL: $url');
      print('üì¶ Request Body: $requestBody');
      print('üì° Sending request...');

      final response = await http.post(
        url,
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: requestBody,
      ).timeout(const Duration(seconds: 15));

      print('üì° Response Status: ${response.statusCode}');
      print('üìÑ Response Body: ${response.body}');

      // ƒê√≥ng loading
      _hideLoadingDialog(context);

      final data = jsonDecode(response.body);
      if (data['success'] == true && data['id'] != null) {
        final orderId = data['id'];
        print('‚úÖ Payment order created: $orderId');
        
        // Hi·ªÉn th·ªã dialog v·ªõi link thanh to√°n th·ªß c√¥ng
        final paypalUrl = 'https://www.sandbox.paypal.com/checkoutnow?token=$orderId';
        _showManualPaymentDialog(context, paypalUrl, total);
        
        // V·∫´n th·ª≠ m·ªü browser nh∆∞ c≈©
        await _openPayPalCheckout(orderId, context, showDialogAfter: false);
      } else {
        throw Exception('Invalid response: ${data['error'] ?? 'Unknown error'}');
      }
    } catch (e) {
      // ƒê√≥ng loading n·∫øu c√≥ l·ªói
      _hideLoadingDialog(context);
      print('‚ùå PayPal Service Error: $e');
      String errorMessage = 'PayPal payment error';
      if (e.toString().contains('SocketException')) {
        errorMessage = 'Cannot connect to PayPal server. Please check your network connection.';
      } else if (e.toString().contains('TimeoutException')) {
        errorMessage = 'PayPal server connection timeout. Please try again.';
      } else if (e.toString().contains('Connection refused')) {
        errorMessage = 'PayPal server not responding. Please try again later.';
      } else {
        errorMessage = 'Payment error: ${e.toString()}';
      }
      _showErrorSnackBar(context, errorMessage);
    }
  }

  /// T·∫°o thanh to√°n PayPal v·ªõi x√°c nh·∫≠n ƒë∆°n h√†ng
  static Future<void> createPaymentWithConfirmation({
    required double total,
    required BuildContext context,
    required List<dynamic> products,
    required String shippingAddress,
  }) async {
    try {
      // L∆∞u th√¥ng tin ƒë∆°n h√†ng hi·ªán t·∫°i
      currentOrderInfo = {
        'total': total,
        'products': products,
        'shippingAddress': shippingAddress,
      };

      // Hi·ªÉn th·ªã dialog x√°c nh·∫≠n ƒë∆°n h√†ng
      bool confirmed = await _showOrderConfirmationDialog(context, total, products, shippingAddress);
      
      if (!confirmed) {
        print('‚ùå User cancelled order confirmation');
        return;
      }

      // G·ªçi method createPayment c≈©
      await createPayment(total, context);
    } catch (e) {
      print('‚ùå PayPal Service Error: $e');
      String errorMessage = 'PayPal payment error';
      if (e.toString().contains('SocketException')) {
        errorMessage = 'Cannot connect to PayPal server. Please check your network connection.';
      } else if (e.toString().contains('TimeoutException')) {
        errorMessage = 'PayPal server connection timeout. Please try again.';
      } else if (e.toString().contains('Connection refused')) {
        errorMessage = 'PayPal server not responding. Please try again later.';
      } else {
        errorMessage = 'Payment error: ${e.toString()}';
      }
      _showErrorSnackBar(context, errorMessage);
    }
  }

  /// Hi·ªÉn th·ªã dialog x√°c nh·∫≠n ƒë∆°n h√†ng
  static Future<bool> _showOrderConfirmationDialog(
    BuildContext context, 
    double total, 
    List<dynamic> products, 
    String shippingAddress
  ) async {
    return await showDialog<bool>(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text(
            'X√°c nh·∫≠n ƒë∆°n h√†ng',
            style: TextStyle(fontWeight: FontWeight.bold),
          ),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'Vui l√≤ng ki·ªÉm tra th√¥ng tin ƒë∆°n h√†ng:',
                  style: TextStyle(fontWeight: FontWeight.w500),
                ),
                const SizedBox(height: 16),
                
                // T·ªïng ti·ªÅn
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    const Text('T·ªïng ti·ªÅn:', style: TextStyle(fontWeight: FontWeight.w500)),
                    Text(
                      '\$${total.toStringAsFixed(2)}',
                      style: const TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: Colors.orange,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 8),
                
                // S·ªë l∆∞·ª£ng s·∫£n ph·∫©m
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    const Text('S·ªë s·∫£n ph·∫©m:', style: TextStyle(fontWeight: FontWeight.w500)),
                    Text('${products.length} s·∫£n ph·∫©m'),
                  ],
                ),
                const SizedBox(height: 8),
                
                // ƒê·ªãa ch·ªâ giao h√†ng
                const Text('ƒê·ªãa ch·ªâ giao h√†ng:', style: TextStyle(fontWeight: FontWeight.w500)),
                const SizedBox(height: 4),
                Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.grey.shade100,
                    borderRadius: BorderRadius.circular(4),
                  ),
                  child: Text(
                    shippingAddress,
                    style: const TextStyle(fontSize: 12),
                  ),
                ),
                const SizedBox(height: 16),
                
                // Danh s√°ch s·∫£n ph·∫©m
                const Text('Danh s√°ch s·∫£n ph·∫©m:', style: TextStyle(fontWeight: FontWeight.w500)),
                const SizedBox(height: 8),
                ...products.take(3).map((product) => Padding(
                  padding: const EdgeInsets.symmetric(vertical: 2),
                  child: Row(
                    children: [
                      const Icon(Icons.check_circle, color: Colors.green, size: 16),
                      const SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          product.productTitle ?? product.toString(),
                          style: const TextStyle(fontSize: 12),
                          maxLines: 1,
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                    ],
                  ),
                )),
                if (products.length > 3)
                  Padding(
                    padding: const EdgeInsets.only(top: 4),
                    child: Text(
                      '... v√† ${products.length - 3} s·∫£n ph·∫©m kh√°c',
                      style: TextStyle(
                        fontSize: 12,
                        color: Colors.grey.shade600,
                        fontStyle: FontStyle.italic,
                      ),
                    ),
                  ),
                const SizedBox(height: 16),
                
                Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.orange.shade50,
                    borderRadius: BorderRadius.circular(4),
                    border: Border.all(color: Colors.orange.shade200),
                  ),
                  child: const Text(
                    'Sau khi x√°c nh·∫≠n, b·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ƒë·∫øn trang thanh to√°n PayPal.',
                    style: TextStyle(
                      fontSize: 12,
                      color: Colors.orange,
                    ),
                  ),
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(false),
              child: const Text('H·ªßy'),
            ),
            ElevatedButton(
              onPressed: () => Navigator.of(context).pop(true),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.orange,
                foregroundColor: Colors.white,
              ),
              child: const Text('X√°c nh·∫≠n & Thanh to√°n'),
            ),
          ],
        );
      },
    ) ?? false;
  }

  /// Hi·ªÉn th·ªã dialog thanh to√°n th·ªß c√¥ng
  static void _showManualPaymentDialog(BuildContext context, String paypalUrl, double total) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: const Text(
          'Thanh to√°n PayPal',
          style: TextStyle(fontWeight: FontWeight.bold),
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Icon(
              Icons.payment,
              color: Colors.orange,
              size: 48,
            ),
            const SizedBox(height: 16),
            Text(
              'T·ªïng ti·ªÅn: \$${total.toStringAsFixed(2)}',
              style: const TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: Colors.orange,
              ),
            ),
            const SizedBox(height: 16),
            const Text(
              'ƒê·ªÉ thanh to√°n, vui l√≤ng:',
              style: TextStyle(fontWeight: FontWeight.w500),
            ),
            const SizedBox(height: 8),
            const Text('1. Sao ch√©p link b√™n d∆∞·ªõi'),
            const Text('2. M·ªü tr√¨nh duy·ªát web'),
            const Text('3. D√°n link v√† ho√†n t·∫•t thanh to√°n'),
            const Text('4. Quay l·∫°i app sau khi thanh to√°n xong'),
            const SizedBox(height: 16),
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                border: Border.all(color: Colors.grey),
                borderRadius: BorderRadius.circular(4),
                color: Colors.grey.shade50,
              ),
              child: SelectableText(
                paypalUrl,
                style: const TextStyle(fontSize: 12),
              ),
            ),
            const SizedBox(height: 16),
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.green.shade50,
                borderRadius: BorderRadius.circular(4),
                border: Border.all(color: Colors.green.shade200),
              ),
              child: const Text(
                'Sau khi thanh to√°n th√†nh c√¥ng, h√£y nh·∫•n "ƒê√£ thanh to√°n" ƒë·ªÉ ho√†n t·∫•t ƒë∆°n h√†ng.',
                style: TextStyle(
                  fontSize: 12,
                  color: Colors.green,
                ),
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () {
              Clipboard.setData(ClipboardData(text: paypalUrl));
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                  content: Text('Link PayPal ƒë√£ ƒë∆∞·ª£c sao ch√©p'),
                  backgroundColor: Colors.green,
                ),
              );
            },
            child: const Text('Sao ch√©p link'),
          ),
          ElevatedButton(
            onPressed: () async {
              Navigator.of(context).pop();
              // X·ª≠ l√Ω thanh to√°n th√†nh c√¥ng
              await handlePaymentSuccess(context);
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.green,
              foregroundColor: Colors.white,
            ),
            child: const Text('ƒê√£ thanh to√°n'),
          ),
        ],
      ),
    );
  }

  /// M·ªü trang thanh to√°n PayPal
  static Future<void> _openPayPalCheckout(String orderId, BuildContext context, {bool showDialogAfter = true}) async {
    try {
      final paypalUrl = Uri.parse('https://www.sandbox.paypal.com/checkoutnow?token=$orderId');
      print('üîó Opening PayPal checkout: $paypalUrl');
      if (await canLaunchUrl(paypalUrl)) {
        try {
          await launchUrl(
            paypalUrl,
            mode: LaunchMode.externalApplication,
          );
          print('‚úÖ PayPal checkout opened successfully');
        } catch (e) {
          print('‚ùå External application failed, trying in-app browser: $e');
          await launchUrl(
            paypalUrl,
            mode: LaunchMode.inAppWebView,
          );
          print('‚úÖ PayPal checkout opened in in-app browser');
        }
        // Lu√¥n hi·ªÉn th·ªã dialog n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
        if (showDialogAfter) {
          _showPayPalUrlDialog(context, paypalUrl.toString());
        }
      } else {
        _showPayPalUrlDialog(context, paypalUrl.toString());
      }
    } catch (e) {
      print('‚ùå Error opening PayPal checkout: $e');
      _showPayPalUrlDialog(context, 'https://www.sandbox.paypal.com/checkoutnow?token=$orderId');
    }
  }

  /// Hi·ªÉn th·ªã dialog v·ªõi URL PayPal ƒë·ªÉ user copy
  static void _showPayPalUrlDialog(BuildContext context, String paypalUrl) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Open PayPal'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Text('Cannot automatically open PayPal. Please:'),
            const SizedBox(height: 10),
            const Text('1. Copy the link below'),
            const Text('2. Open your browser'),
            const Text('3. Paste the link and pay'),
            const SizedBox(height: 10),
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                border: Border.all(color: Colors.grey),
                borderRadius: BorderRadius.circular(4),
              ),
              child: SelectableText(
                paypalUrl,
                style: const TextStyle(fontSize: 12),
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () {
              Clipboard.setData(ClipboardData(text: paypalUrl));
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('PayPal link copied to clipboard')),
              );
            },
            child: const Text('Copy Link'),
          ),
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Close'),
          ),
        ],
      ),
    );
  }

  /// Hi·ªÉn th·ªã dialog loading
  static void _showLoadingDialog(BuildContext context) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => const AlertDialog(
        content: Row(
          children: [
            CircularProgressIndicator(),
            SizedBox(width: 20),
            Text('Creating payment...'),
          ],
        ),
      ),
    );
  }

  /// ·∫®n dialog loading
  static void _hideLoadingDialog(BuildContext context) {
    try {
      if (context.mounted && Navigator.of(context).canPop()) {
        Navigator.of(context).pop();
      }
    } catch (e) {
      print('‚ö†Ô∏è Error hiding loading dialog: $e');
    }
  }

  /// Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
  static void _showErrorSnackBar(BuildContext context, String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
        duration: const Duration(seconds: 5),
        action: SnackBarAction(
          label: 'Close',
          textColor: Colors.white,
          onPressed: () {
            ScaffoldMessenger.of(context).hideCurrentSnackBar();
          },
        ),
      ),
    );
  }

  /// Ki·ªÉm tra k·∫øt n·ªëi server
  static Future<bool> checkServerConnection() async {
    try {
      final url = Uri.parse('$_serverUrl/');
      final response = await http.get(url).timeout(const Duration(seconds: 10));
      return response.statusCode == 200;
    } catch (e) {
      print('‚ùå Server connection check failed: $e');
      return false;
    }
  }

  /// T·∫°o thanh to√°n v·ªõi retry logic
  static Future<void> createPaymentWithRetry(double total, BuildContext context, {int maxRetries = 3}) async {
    for (int attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        print('üîÑ Attempt $attempt/$maxRetries - Creating payment for: \$${total}');
        await createPayment(total, context);
        return; // Th√†nh c√¥ng, tho√°t kh·ªèi retry
      } catch (e) {
        print('‚ùå Attempt $attempt failed: $e');
        if (attempt == maxRetries) {
          // L·∫ßn cu·ªëi c√πng th·∫•t b·∫°i
          _showErrorSnackBar(context, 'Cannot connect to server after $maxRetries attempts. Please check your network connection.');
          rethrow;
        }
        // Ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi th·ª≠ l·∫°i
        await Future.delayed(Duration(seconds: attempt * 2));
      }
    }
  }

  /// L∆∞u ƒë∆°n h√†ng l√™n Firebase
  static Future<void> saveOrderToFirebase({
    required double total,
    required List<dynamic> products,
    required String shippingAddress,
    required String paymentMethod,
  }) async {
    try {
      print('üî• Saving order to Firebase...');
      
      // L·∫•y userId t·ª´ Firebase Auth
      final user = FirebaseAuth.instance.currentUser;
      if (user == null) {
        throw Exception('User not authenticated');
      }
      
      final userId = user.uid;
      print('üë§ User ID: $userId');
      
      // X·ª≠ l√Ω products ƒë·ªÉ tr√°nh l·ªói toMap()
      List<Map<String, dynamic>> processedProducts = [];
      for (var product in products) {
        try {
          if (product is ProductOrderedEntity) {
            processedProducts.add(product.toMap());
          } else if (product is Map<String, dynamic>) {
            processedProducts.add(Map<String, dynamic>.from(product));
          } else {
            // Fallback: t·∫°o map t·ª´ c√°c thu·ªôc t√≠nh c∆° b·∫£n
            processedProducts.add({
              'productId': product.productId ?? 'unknown',
              'productTitle': product.productTitle ?? 'Unknown Product',
              'productPrice': product.productPrice ?? 0.0,
              'productQuantity': product.productQuantity ?? 1,
              'productColor': product.productColor ?? 'Unknown',
              'productSize': product.productSize ?? 'Unknown',
              'productImage': product.productImage ?? '',
              'totalPrice': product.totalPrice ?? 0.0,
              'createdDate': product.createdDate ?? DateTime.now().toIso8601String(),
              'id': product.id ?? 'unknown',
              'code': product.code ?? 'UNKNOWN',
            });
          }
        } catch (e) {
          print('‚ö†Ô∏è Error processing product: $e');
          // Th√™m product m·∫∑c ƒë·ªãnh n·∫øu c√≥ l·ªói
          processedProducts.add({
            'productId': 'error_product',
            'productTitle': 'Product (Error)',
            'productPrice': 0.0,
            'productQuantity': 1,
            'productColor': 'Unknown',
            'productSize': 'Unknown',
            'productImage': '',
            'totalPrice': 0.0,
            'createdDate': DateTime.now().toIso8601String(),
            'id': 'error_${DateTime.now().millisecondsSinceEpoch}',
            'code': 'ERROR',
          });
        }
      }
      
      print('üì¶ Processed ${processedProducts.length} products');
      
      final orderData = {
        'total': total,
        'products': processedProducts,
        'shippingAddress': shippingAddress,
        'paymentMethod': paymentMethod,
        'status': 'paid',
        'createdAt': FieldValue.serverTimestamp(),
        'orderId': 'ORDER-${DateTime.now().millisecondsSinceEpoch}',
        'code': 'OD-${DateTime.now().microsecondsSinceEpoch}',
        'userId': userId,
        'orderStatus': [
          {
            'title': 'Order Placed',
            'done': true,
            'createdDate': DateTime.now().toIso8601String(),
          },
          {
            'title': 'Processing',
            'done': true,
            'createdDate': DateTime.now().toIso8601String(),
          },
          {
            'title': 'Shipped',
            'done': false,
            'createdDate': DateTime.now().toIso8601String(),
          },
          {
            'title': 'Delivered',
            'done': false,
            'createdDate': DateTime.now().toIso8601String(),
          },
        ],
      };

      print('üìã Order data prepared: ${orderData.keys.toList()}');

      // L∆∞u v√†o Users/{userId}/Orders/{autoDocId}
      final docRef = await FirebaseFirestore.instance
          .collection('Users')
          .doc(userId)
          .collection('Orders')
          .add(orderData);

      print('‚úÖ Order saved to Firebase successfully');
      print('üìÅ Path: Users/$userId/Orders/${docRef.id}');
      print('üìÑ Document ID: ${docRef.id}');
      
    } catch (e) {
      print('‚ùå Error saving order to Firebase: $e');
      print('‚ùå Error type: ${e.runtimeType}');
      print('‚ùå Error details: $e');
      
      // Th√™m th√¥ng tin debug chi ti·∫øt h∆°n
      if (e.toString().contains('permission-denied')) {
        throw Exception('Kh√¥ng c√≥ quy·ªÅn l∆∞u ƒë∆°n h√†ng. Vui l√≤ng ki·ªÉm tra quy·ªÅn Firebase.');
      } else if (e.toString().contains('unavailable')) {
        throw Exception('Firebase kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.');
      } else if (e.toString().contains('invalid-argument')) {
        throw Exception('D·ªØ li·ªáu ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.');
      } else {
        throw Exception('L·ªói khi l∆∞u ƒë∆°n h√†ng: $e');
      }
    }
  }

  /// X·ª≠ l√Ω thanh to√°n th√†nh c√¥ng
  static Future<void> handlePaymentSuccess(BuildContext context) async {
    try {
      if (currentOrderInfo == null) {
        throw Exception('Kh√¥ng c√≥ th√¥ng tin ƒë∆°n h√†ng');
      }

      final total = currentOrderInfo!['total'] as double;
      final products = currentOrderInfo!['products'] as List<dynamic>;
      final shippingAddress = currentOrderInfo!['shippingAddress'] as String;

      print('üí≥ Processing payment success...');
      print('üí∞ Total: \$${total}');
      print('üì¶ Products count: ${products.length}');
      print('üìç Address: $shippingAddress');

      // Hi·ªÉn th·ªã loading
      _showLoadingDialog(context);

      // L∆∞u ƒë∆°n h√†ng l√™n Firebase
      await saveOrderToFirebase(
        total: total,
        products: products,
        shippingAddress: shippingAddress,
        paymentMethod: 'PayPal',
      );

      // ƒê√≥ng loading
      _hideLoadingDialog(context);

      // X√≥a th√¥ng tin ƒë∆°n h√†ng hi·ªán t·∫°i
      currentOrderInfo = null;

      // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Thanh to√°n th√†nh c√¥ng! ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t.'),
            backgroundColor: Colors.green,
            duration: Duration(seconds: 2),
          ),
        );
      }

      // Refresh cart tr∆∞·ªõc khi chuy·ªÉn trang
      if (context.mounted) {
        try {
          refreshCart(context);
        } catch (e) {
          print('‚ö†Ô∏è Cart refresh failed: $e');
          // Kh√¥ng d·ª´ng lu·ªìng n·∫øu refresh cart th·∫•t b·∫°i
        }

        // Chuy·ªÉn ƒë·∫øn trang thanh to√°n th√†nh c√¥ng
        navigateToOrderPlacedPage(context);
      }

    } catch (e) {
      // ƒê√≥ng loading n·∫øu c√≥ l·ªói
      if (context.mounted) {
        _hideLoadingDialog(context);
        print('‚ùå Error handling payment success: $e');
        print('‚ùå Error type: ${e.runtimeType}');
        
        String errorMessage = 'L·ªói khi l∆∞u ƒë∆°n h√†ng';
        
        if (e.toString().contains('User not authenticated')) {
          errorMessage = 'Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i ƒë·ªÉ ti·∫øp t·ª•c';
        } else if (e.toString().contains('permission-denied')) {
          errorMessage = 'Kh√¥ng c√≥ quy·ªÅn l∆∞u ƒë∆°n h√†ng';
        } else if (e.toString().contains('unavailable')) {
          errorMessage = 'K·∫øt n·ªëi m·∫°ng kh√¥ng ·ªïn ƒë·ªãnh, vui l√≤ng th·ª≠ l·∫°i';
        } else if (e.toString().contains('invalid-argument')) {
          errorMessage = 'D·ªØ li·ªáu ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá';
        } else {
          errorMessage = 'L·ªói: ${e.toString()}';
        }
        
        _showErrorSnackBar(context, errorMessage);
      }
    }
  }

  /// Refresh cart sau khi thanh to√°n th√†nh c√¥ng
  static void refreshCart(BuildContext context) {
    // T√¨m v√† refresh CartProductsDisplayCubit n·∫øu c√≥
    try {
      if (context.mounted) {
        final cartCubit = BlocProvider.of<CartProductsDisplayCubit>(context, listen: false);
        if (cartCubit != null) {
          cartCubit.displayCartProduct();
          print('‚úÖ Cart refreshed successfully');
        }
      }
    } catch (e) {
      print('‚ö†Ô∏è Could not refresh cart: $e');
    }
  }

  /// Chuy·ªÉn ƒë·∫øn trang thanh to√°n th√†nh c√¥ng
  static void navigateToOrderPlacedPage(BuildContext context) {
    print('üîÑ Navigating to OrderPlacedPage...');
    
    // Th·ª≠ nhi·ªÅu c√°ch navigation kh√°c nhau
    try {
      // C√°ch 1: pushAndRemoveUntil v·ªõi (route) => false
      Navigator.pushAndRemoveUntil(
        context,
        MaterialPageRoute(builder: (context) => const OrderPlacedPage()),
        (route) => false,
      );
      print('‚úÖ Navigation successful - Method 1');
    } catch (e) {
      print('‚ö†Ô∏è Navigation method 1 failed: $e');
      
      try {
        // C√°ch 2: pushAndRemoveUntil v·ªõi (route) => route.isFirst
        if (context.mounted) {
          Navigator.pushAndRemoveUntil(
            context,
            MaterialPageRoute(builder: (context) => const OrderPlacedPage()),
            (route) => route.isFirst,
          );
          print('‚úÖ Navigation successful - Method 2');
        }
      } catch (e) {
        print('‚ö†Ô∏è Navigation method 2 failed: $e');
        
        try {
          // C√°ch 3: pushReplacement
          if (context.mounted) {
            Navigator.pushReplacement(
              context,
              MaterialPageRoute(builder: (context) => const OrderPlacedPage()),
            );
            print('‚úÖ Navigation successful - Method 3');
          }
        } catch (e) {
          print('‚ö†Ô∏è Navigation method 3 failed: $e');
          
          // C√°ch 4: push ƒë∆°n gi·∫£n
          if (context.mounted) {
            Navigator.push(
              context,
              MaterialPageRoute(builder: (context) => const OrderPlacedPage()),
            );
            print('‚úÖ Navigation successful - Method 4');
          }
        }
      }
    }
  }

  /// Test Firebase connection
  static Future<bool> testFirebaseConnection() async {
    try {
      print('üî• Testing Firebase connection...');
      
      // Ki·ªÉm tra authentication
      final user = FirebaseAuth.instance.currentUser;
      if (user == null) {
        print('‚ùå User not authenticated');
        return false;
      }
      
      print('‚úÖ User authenticated: ${user.uid}');
      
      // Test write to Firebase
      final testData = {
        'test': true,
        'timestamp': DateTime.now().toIso8601String(),
        'message': 'Firebase connection test',
      };
      
      final docRef = await FirebaseFirestore.instance
          .collection('Users')
          .doc(user.uid)
          .collection('Test')
          .add(testData);
      
      print('‚úÖ Firebase write test successful: ${docRef.id}');
      
      // Clean up test data
      await docRef.delete();
      print('‚úÖ Test data cleaned up');
      
      return true;
    } catch (e) {
      print('‚ùå Firebase connection test failed: $e');
      return false;
    }
  }
} 