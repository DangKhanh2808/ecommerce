import 'package:flutter/material.dart';
import 'package:ecommerce/core/service/pay_with_paypal.dart';
import 'package:ecommerce/domain/order/entities/product_oredered.dart';

/// Demo page ƒë·ªÉ test lu·ªìng thanh to√°n PayPal
class PayPalDemoPage extends StatelessWidget {
  const PayPalDemoPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('PayPal Demo'),
        backgroundColor: Colors.orange,
        foregroundColor: Colors.white,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            const Text(
              'Test Lu·ªìng Thanh To√°n PayPal',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 20),
            
            // Th√¥ng tin demo
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'Th√¥ng tin Demo:',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 8),
                    const Text('‚Ä¢ T·ªïng ti·ªÅn: \$99.99'),
                    const Text('‚Ä¢ S·ªë s·∫£n ph·∫©m: 3'),
                    const Text('‚Ä¢ ƒê·ªãa ch·ªâ: 123 Demo Street'),
                    const Text('‚Ä¢ Ph∆∞∆°ng th·ª©c: PayPal'),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 20),
            
            // N√∫t test Firebase connection
            ElevatedButton.icon(
              onPressed: () => _testFirebaseConnection(context),
              icon: const Icon(Icons.cloud, color: Colors.white),
              label: const Text(
                'Test Firebase Connection',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blue,
                padding: const EdgeInsets.symmetric(vertical: 16),
              ),
            ),
            const SizedBox(height: 16),
            
            // N√∫t test navigation
            ElevatedButton.icon(
              onPressed: () => _testNavigation(context),
              icon: const Icon(Icons.navigation, color: Colors.white),
              label: const Text(
                'Test Navigation',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.purple,
                padding: const EdgeInsets.symmetric(vertical: 16),
              ),
            ),
            const SizedBox(height: 16),
            
            // N√∫t test thanh to√°n
            ElevatedButton.icon(
              onPressed: () => _testPayPalPayment(context),
              icon: const Icon(Icons.payment, color: Colors.white),
              label: const Text(
                'Test Thanh To√°n PayPal',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.orange,
                padding: const EdgeInsets.symmetric(vertical: 16),
              ),
            ),
            const SizedBox(height: 16),
            
            // H∆∞·ªõng d·∫´n
            Card(
              color: Colors.blue.shade50,
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'H∆∞·ªõng d·∫´n Test:',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                        color: Colors.blue,
                      ),
                    ),
                    const SizedBox(height: 8),
                    const Text('1. Nh·∫•n "Test Thanh To√°n PayPal"'),
                    const Text('2. Xem dialog x√°c nh·∫≠n ƒë∆°n h√†ng'),
                    const Text('3. X√°c nh·∫≠n ƒë·ªÉ ti·∫øp t·ª•c'),
                    const Text('4. Xem dialog thanh to√°n th·ªß c√¥ng'),
                    const Text('5. Nh·∫•n "ƒê√£ thanh to√°n" ƒë·ªÉ ho√†n t·∫•t'),
                    const Text('6. Ki·ªÉm tra chuy·ªÉn ƒë·∫øn trang th√†nh c√¥ng'),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  /// Test navigation
  void _testNavigation(BuildContext context) {
    try {
      print('üß™ Testing navigation to OrderPlacedPage...');
      
      // Test navigation tr·ª±c ti·∫øp
      PayPalService.navigateToOrderPlacedPage(context);
      
      print('‚úÖ Navigation test completed');
    } catch (e) {
      print('‚ùå Navigation test error: $e');
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Navigation test error: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  /// Test Firebase connection
  void _testFirebaseConnection(BuildContext context) async {
    try {
      // Hi·ªÉn th·ªã loading
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) => const AlertDialog(
          content: Row(
            children: [
              CircularProgressIndicator(),
              SizedBox(width: 20),
              Text('Testing Firebase connection...'),
            ],
          ),
        ),
      );

      // Test Firebase connection
      final success = await PayPalService.testFirebaseConnection();

      // ƒê√≥ng loading
      Navigator.of(context).pop();

      if (success) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Firebase connection successful!'),
            backgroundColor: Colors.green,
          ),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Firebase connection failed. Check console for details.'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } catch (e) {
      // ƒê√≥ng loading n·∫øu c√≥ l·ªói
      if (Navigator.of(context).canPop()) {
        Navigator.of(context).pop();
      }
      
      print('‚ùå Firebase test error: $e');
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Firebase test error: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  /// Test lu·ªìng thanh to√°n PayPal
  void _testPayPalPayment(BuildContext context) async {
    try {
      // T·∫°o danh s√°ch s·∫£n ph·∫©m demo
      final demoProducts = [
        ProductOrderedEntity(
          productId: '1',
          productTitle: 'S·∫£n ph·∫©m Demo 1',
          productPrice: 29.99,
          productSize: 'M',
          productColor: 'ƒê·ªè',
          productQuantity: 1,
          productImage: 'demo1.jpg',
          totalPrice: 29.99,
          createdDate: DateTime.now().toIso8601String(),
          id: 'demo1',
          code: 'DEMO1',
        ),
        ProductOrderedEntity(
          productId: '2',
          productTitle: 'S·∫£n ph·∫©m Demo 2',
          productPrice: 39.99,
          productSize: 'L',
          productColor: 'Xanh',
          productQuantity: 1,
          productImage: 'demo2.jpg',
          totalPrice: 39.99,
          createdDate: DateTime.now().toIso8601String(),
          id: 'demo2',
          code: 'DEMO2',
        ),
        ProductOrderedEntity(
          productId: '3',
          productTitle: 'S·∫£n ph·∫©m Demo 3',
          productPrice: 29.99,
          productSize: 'S',
          productColor: 'V√†ng',
          productQuantity: 1,
          productImage: 'demo3.jpg',
          totalPrice: 29.99,
          createdDate: DateTime.now().toIso8601String(),
          id: 'demo3',
          code: 'DEMO3',
        ),
      ];

      // G·ªçi method thanh to√°n v·ªõi x√°c nh·∫≠n
      await PayPalService.createPaymentWithConfirmation(
        total: 99.99,
        context: context,
        products: demoProducts,
        shippingAddress: '123 Demo Street, Demo City, DC 12345',
      );

      print('‚úÖ PayPal demo completed successfully');
    } catch (e) {
      print('‚ùå PayPal demo error: $e');
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Demo error: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }
} 